# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import std_pb2 as std__pb2
import tf_pb2 as tf__pb2


class TfStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetAllFrames = channel.unary_unary(
        '/tf.Tf/GetAllFrames',
        request_serializer=std__pb2.Empty.SerializeToString,
        response_deserializer=tf__pb2.TfFrameList.FromString,
        )
    self.GetFrame = channel.unary_unary(
        '/tf.Tf/GetFrame',
        request_serializer=tf__pb2.TfFrameRequest.SerializeToString,
        response_deserializer=tf__pb2.TfFrame.FromString,
        )
    self.StreamAllFrames = channel.unary_stream(
        '/tf.Tf/StreamAllFrames',
        request_serializer=std__pb2.Empty.SerializeToString,
        response_deserializer=tf__pb2.TfFrameList.FromString,
        )
    self.StreamFrame = channel.unary_stream(
        '/tf.Tf/StreamFrame',
        request_serializer=tf__pb2.TfFrameRequest.SerializeToString,
        response_deserializer=tf__pb2.TfFrame.FromString,
        )
    self.PublishFrame = channel.stream_unary(
        '/tf.Tf/PublishFrame',
        request_serializer=tf__pb2.TfFrame.SerializeToString,
        response_deserializer=std__pb2.Empty.FromString,
        )


class TfServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetAllFrames(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetFrame(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamAllFrames(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamFrame(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PublishFrame(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TfServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetAllFrames': grpc.unary_unary_rpc_method_handler(
          servicer.GetAllFrames,
          request_deserializer=std__pb2.Empty.FromString,
          response_serializer=tf__pb2.TfFrameList.SerializeToString,
      ),
      'GetFrame': grpc.unary_unary_rpc_method_handler(
          servicer.GetFrame,
          request_deserializer=tf__pb2.TfFrameRequest.FromString,
          response_serializer=tf__pb2.TfFrame.SerializeToString,
      ),
      'StreamAllFrames': grpc.unary_stream_rpc_method_handler(
          servicer.StreamAllFrames,
          request_deserializer=std__pb2.Empty.FromString,
          response_serializer=tf__pb2.TfFrameList.SerializeToString,
      ),
      'StreamFrame': grpc.unary_stream_rpc_method_handler(
          servicer.StreamFrame,
          request_deserializer=tf__pb2.TfFrameRequest.FromString,
          response_serializer=tf__pb2.TfFrame.SerializeToString,
      ),
      'PublishFrame': grpc.stream_unary_rpc_method_handler(
          servicer.PublishFrame,
          request_deserializer=tf__pb2.TfFrame.FromString,
          response_serializer=std__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'tf.Tf', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
